{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "## Linear Regression Algorithm with Multiple Variables"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "source": [
    "#Import library\r\n",
    "import numpy as np\r\n",
    "import pandas as pd\r\n",
    "import matplotlib.pyplot as plt\r\n",
    "import seaborn as sns\r\n",
    "from sklearn.linear_model import LinearRegression "
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "source": [
    "df=pd.read_csv('Linear Regression Algorithm4 with Multiple Variables Data Set/car data.csv')"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "source": [
    "df"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>speed</th>\n",
       "      <th>car_age</th>\n",
       "      <th>experience</th>\n",
       "      <th>risk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>200</td>\n",
       "      <td>15</td>\n",
       "      <td>5.0</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>90</td>\n",
       "      <td>17</td>\n",
       "      <td>13.0</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>165</td>\n",
       "      <td>12</td>\n",
       "      <td>4.0</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>110</td>\n",
       "      <td>20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>140</td>\n",
       "      <td>5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>115</td>\n",
       "      <td>2</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   speed  car_age  experience  risk\n",
       "0    200       15         5.0    85\n",
       "1     90       17        13.0    20\n",
       "2    165       12         4.0    93\n",
       "3    110       20         NaN    60\n",
       "4    140        5         3.0    82\n",
       "5    115        2         8.0    10"
      ]
     },
     "metadata": {},
     "execution_count": 3
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "source": [
    "df.experience"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "0     5.0\n",
       "1    13.0\n",
       "2     4.0\n",
       "3     NaN\n",
       "4     3.0\n",
       "5     8.0\n",
       "Name: experience, dtype: float64"
      ]
     },
     "metadata": {},
     "execution_count": 4
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "source": [
    "df.isnull().any()"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "speed         False\n",
       "car_age       False\n",
       "experience     True\n",
       "risk          False\n",
       "dtype: bool"
      ]
     },
     "metadata": {},
     "execution_count": 5
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "source": [
    "df.isnull().sum()"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "speed         0\n",
       "car_age       0\n",
       "experience    1\n",
       "risk          0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "execution_count": 6
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Visualization"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "source": [
    "df.plot()"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x19e0e936708>"
      ]
     },
     "metadata": {},
     "execution_count": 7
    },
    {
     "output_type": "display_data",
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     }
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "source": [
    "df['speed'].plot(kind='hist')"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x19e0f0b4348>"
      ]
     },
     "metadata": {},
     "execution_count": 8
    },
    {
     "output_type": "display_data",
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     }
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "source": [
    "df['car_age'].plot(kind='hist')"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x19e0f16bf08>"
      ]
     },
     "metadata": {},
     "execution_count": 9
    },
    {
     "output_type": "display_data",
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     }
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "source": [
    "df['experience'].plot(kind='hist')"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x19e0f206488>"
      ]
     },
     "metadata": {},
     "execution_count": 10
    },
    {
     "output_type": "display_data",
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     }
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "source": [
    "df.experience.median()"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "5.0"
      ]
     },
     "metadata": {},
     "execution_count": 11
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "source": [
    "exm_fit=df.experience.median()\r\n",
    "exm_fit"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "5.0"
      ]
     },
     "metadata": {},
     "execution_count": 12
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Replace empty value or replace only empty value"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "source": [
    "#df.fillna(exm_fit,inplace=True)\r\n",
    "#df['experience'].fillna(exm_fit,inplace=True)\r\n",
    "df.experience=df.experience.fillna(exm_fit)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "source": [
    "df.experience"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "0     5.0\n",
       "1    13.0\n",
       "2     4.0\n",
       "3     5.0\n",
       "4     3.0\n",
       "5     8.0\n",
       "Name: experience, dtype: float64"
      ]
     },
     "metadata": {},
     "execution_count": 14
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "source": [
    "#object create\r\n",
    "reg=LinearRegression()"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "source": [
    "#model fit\r\n",
    "reg.fit(df[['speed','car_age','experience']],df.risk)"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "metadata": {},
     "execution_count": 16
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "### model traing or model accuracy"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "source": [
    "#model traing\r\n",
    "reg.predict([[160,10,5]])"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "array([71.37146872])"
      ]
     },
     "metadata": {},
     "execution_count": 17
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Equation check acurancy"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "source": [
    "reg.coef_ # m"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "array([ 0.33059217,  1.61053246, -6.20772074])"
      ]
     },
     "metadata": {},
     "execution_count": 18
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "source": [
    "reg.intercept_ #c"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "33.410000910435905"
      ]
     },
     "metadata": {},
     "execution_count": 19
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "source": [
    "y=0.33059217*160+1.61053246*10+(-6.20772074*5)+33.410000910435905\r\n",
    "y # model acuracy and equation acuracy"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "71.3714690104359"
      ]
     },
     "metadata": {},
     "execution_count": 20
    }
   ],
   "metadata": {}
  }
 ],
 "metadata": {
  "orig_nbformat": 4,
  "language_info": {
   "name": "python",
   "version": "3.7.6",
   "mimetype": "text/x-python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "pygments_lexer": "ipython3",
   "nbconvert_exporter": "python",
   "file_extension": ".py"
  },
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.7.6 64-bit"
  },
  "interpreter": {
   "hash": "cd8ac7ed5329ff1f59a8356dfddf06d159cf18414acbfd7b13d1d5cd1cbb5d7d"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
